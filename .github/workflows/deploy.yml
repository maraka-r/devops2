name: Build and Deploy Fullstack App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Build React Frontend Docker image
        run: docker build -t react-frontend:${{ github.sha }} .
        working-directory: ./frontend

      - name: Build Backend API Docker image
        run: docker build -t backend-api:${{ github.sha }} .
        working-directory: ./backend

      - name: Save and compress React Frontend image
        run: |
          docker save react-frontend:${{ github.sha }} -o react-frontend.tar
          gzip react-frontend.tar

      - name: Save and compress Backend API image
        run: |
          docker save backend-api:${{ github.sha }} -o backend-api.tar
          gzip backend-api.tar

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            react-frontend.tar.gz
            backend-api.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .

      # ðŸ”¹ Copier les images Docker sur les 4 VMs
      - name: Copy Docker images to VMs
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VM1_IP }},${{ secrets.VM2_IP }},${{ secrets.VM3_IP }},${{ secrets.VM4_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "react-frontend.tar.gz,backend-api.tar.gz"
          target: ~/

      # ðŸ”¹ DÃ©ployer containers sur chaque VM
      - name: Deploy containers on VMs
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM1_IP }},${{ secrets.VM2_IP }},${{ secrets.VM3_IP }},${{ secrets.VM4_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            gunzip -f ~/react-frontend.tar.gz || true
            gunzip -f ~/backend-api.tar.gz || true
            docker load -i ~/react-frontend.tar || true
            docker load -i ~/backend-api.tar || true
            docker stop react-frontend backend-api || true
            docker rm react-frontend backend-api || true

            if hostname | grep -q "frontend"; then
              docker run -d --name react-frontend -p 80:80 react-frontend:${{ github.sha }}
            else
              docker run -d --name backend-api -p 8000:8000 backend-api:${{ github.sha }}
            fi

      # ðŸ”¹ Enregistrer les instances dans les Target Groups avec leurs IDs
      - name: Register targets to Frontend TG
        run: |
          aws elbv2 register-targets \
            --target-group-arn ${{ secrets.FRONTEND_TG_ARN }} \
            --targets Id=${{ secrets.VM1_ID }} Id=${{ secrets.VM2_ID }}

      - name: Register targets to Backend TG
        run: |
          aws elbv2 register-targets \
            --target-group-arn ${{ secrets.BACKEND_TG_ARN }} \
            --targets Id=${{ secrets.VM3_ID }} Id=${{ secrets.VM4_ID }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
