name: CI/CD Deployment with Health Check

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-3
      FRONTEND_ECR: 426941767449.dkr.ecr.eu-west-3.amazonaws.com/frontend-app:latest
      BACKEND_ECR: 426941767449.dkr.ecr.eu-west-3.amazonaws.com/backend-app:latest
      FRONTEND_TG: arn:aws:elasticloadbalancing:eu-west-3:426941767449:targetgroup/AWS-IaC-React-Monito-frtg/24d0446d9041a48a
      BACKEND_TG: arn:aws:elasticloadbalancing:eu-west-3:426941767449:targetgroup/AWS-IaC-React-Monito-betg/0690d1c77c526315
      FRONTEND_LB: AWS-IaC-React-Monito-frlb-1163085529.eu-west-3.elb.amazonaws.com
      BACKEND_LB: AWS-IaC-React-Monito-belb-659257707.eu-west-3.elb.amazonaws.com
      FRONTEND_INSTANCES: "51.44.217.43 15.237.115.46"
      BACKEND_INSTANCES: "13.39.104.246 51.44.203.84"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 426941767449.dkr.ecr.eu-west-3.amazonaws.com

      - name: Build and push Docker images
        run: |
          docker build -t frontend ./frontend
          docker tag frontend $FRONTEND_ECR
          docker push $FRONTEND_ECR

          docker build -t backend ./backend
          docker tag backend $BACKEND_ECR
          docker push $BACKEND_ECR

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Deploy to EC2 frontend instances
        run: |
          for ip in $FRONTEND_INSTANCES; do
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$ip \
            "sudo docker stop -f frontend 2>/dev/null; \
             sudo docker rm -f frontend 2>/dev/null; \
             sudo docker run -d -p 80:80 --name frontend $FRONTEND_ECR"
          done

      - name: Deploy to EC2 backend instances
        run: |
          for ip in $BACKEND_INSTANCES; do
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$ip \
            "sudo docker stop -f backend 2>/dev/null; \
             sudo docker rm -f backend 2>/dev/null; \
             sudo docker run -d -p 5000:8000 --name backend $BACKEND_ECR"
          done

      - name: Check Target Group Health
        run: |
          echo "=== Frontend TG ==="
          aws elbv2 describe-target-health --target-group-arn $FRONTEND_TG \
            --query 'TargetHealthDescriptions[*].{ID:Target.Id,State:TargetHealth.State}' --output table

          echo "=== Backend TG ==="
          aws elbv2 describe-target-health --target-group-arn $BACKEND_TG \
            --query 'TargetHealthDescriptions[*].{ID:Target.Id,State:TargetHealth.State}' --output table

      - name: Test Load Balancers
        run: |
          echo "Testing Frontend LB"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$FRONTEND_LB)
          echo "StatusCode $STATUS"
          if [ "$STATUS" -ne 200 ]; then
            echo "Frontend LB not responding correctly!"
            exit 1
          fi
          echo "Testing Backend LB"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 15 http://$BACKEND_LB:5000)
          echo "StatusCode $STATUS"
          if [ "$STATUS" -ne 200 ]; then
          echo "Backend LB not responding correctly!"
          exit 1
          fi

      - name: Test Load Balancers
        run: |
          check_lb() {
            NAME=$1
            URL=$2
            EXPECTED=$3
            RETRIES=5
            DELAY=5

            echo "Testing $NAME at $URL"
            for i in $(seq 1 $RETRIES); do
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 $URL || echo "000")
              echo "Attempt $i/$RETRIES => StatusCode $STATUS"
              if [ "$STATUS" -eq "$EXPECTED" ]; then
                echo "$NAME is healthy ✅"
                return 0
              fi
              sleep $DELAY
            done
            echo "$NAME did not respond correctly ❌"
            exit 1
          }

          # Frontend LB (port 80)
          check_lb "Frontend LB" "http://$FRONTEND_LB" 200

          # Backend LB (port 5000)
          check_lb "Backend LB" "http://$BACKEND_LB:5000" 200
