name: Build and Deploy Fullstack App (Multi-VM with Load Balancer)

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      # Build images
      - name: Build React Frontend Docker image
        run: docker build -t react-frontend:${{ github.sha }} .
        working-directory: ./frontend

      - name: Build Backend API Docker image
        run: docker build -t backend-api:${{ github.sha }} .
        working-directory: ./backend

      # Save + compress
      - name: Save and compress React Frontend image
        run: |
          docker save react-frontend:${{ github.sha }} -o react-frontend.tar
          gzip react-frontend.tar

      - name: Save and compress Backend API image
        run: |
          docker save backend-api:${{ github.sha }} -o backend-api.tar
          gzip backend-api.tar

      # Upload artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            react-frontend.tar.gz
            backend-api.tar.gz

  # -----------------------------
  # Deploy Frontend VM1
  # -----------------------------
  deploy-frontend-vm1:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .
      - uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VM1_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "react-frontend.tar.gz"
          target: ~/
      - uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM1_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            gunzip ~/react-frontend.tar.gz
            docker load -i ~/react-frontend.tar
            docker stop react-frontend || true
            docker rm react-frontend || true
            docker run -d --name react-frontend -p 80:80 react-frontend:${{ github.sha }}
            rm ~/react-frontend.tar

  deploy-frontend-vm2:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .
      - uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VM2_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "react-frontend.tar.gz"
          target: ~/
      - uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM2_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            gunzip ~/react-frontend.tar.gz
            docker load -i ~/react-frontend.tar
            docker stop react-frontend || true
            docker rm react-frontend || true
            docker run -d --name react-frontend -p 80:80 react-frontend:${{ github.sha }}
            rm ~/react-frontend.tar

  deploy-backend-vm3:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .
      - uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VM3_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "backend-api.tar.gz"
          target: ~/
      - uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM3_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            gunzip ~/backend-api.tar.gz
            docker load -i ~/backend-api.tar
            docker stop backend-api || true
            docker rm backend-api || true
            docker run -d --name backend-api -p 8000:3000 backend-api:${{ github.sha }}
            rm ~/backend-api.tar

  deploy-backend-vm4:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .
      - uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VM4_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "backend-api.tar.gz"
          target: ~/
      - uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM4_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            gunzip ~/backend-api.tar.gz
            docker load -i ~/backend-api.tar
            docker stop backend-api || true
            docker rm backend-api || true
            docker run -d --name backend-api -p 8000:3000 backend-api:${{ github.sha }}
            rm ~/backend-api.tar

  # -----------------------------
  # Update AWS Load Balancers
  # -----------------------------
  update-loadbalancers:
    needs: [deploy-frontend-vm1, deploy-frontend-vm2, deploy-backend-vm3, deploy-backend-vm4]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Register frontend targets
        run: |
          aws elbv2 register-targets \
            --target-group-arn ${{ secrets.FRONTEND_TG_ARN }} \
            --targets Id=${{ secrets.VM1_ID }},Port=80 \
                      Id=${{ secrets.VM2_ID }},Port=80

      - name: Register backend targets
        run: |
          aws elbv2 register-targets \
            --target-group-arn ${{ secrets.BACKEND_TG_ARN }} \
            --targets Id=${{ secrets.VM3_ID }},Port=8000 \
                      Id=${{ secrets.VM4_ID }},Port=8000
