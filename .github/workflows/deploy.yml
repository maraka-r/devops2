name: Build and Deploy Fullstack App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Build React Frontend Docker image
        run: docker build -t react-frontend:${{ github.sha }} .
        working-directory: ./frontend

      - name: Build Backend API Docker  image
        run: docker build -t backend-api:${{ github.sha }} .
        working-directory: ./backend

      - name: Save and compress React Frontend image
        run: |
          docker save react-frontend:${{ github.sha }} -o react-frontend.tar
          gzip react-frontend.tar

      - name: Save and compress Backend API image
        run: |
          docker save backend-api:${{ github.sha }} -o backend-api.tar
          gzip backend-api.tar

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            react-frontend.tar.gz
            backend-api.tar.gz

  deploy-vm1:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .

      - name: Copy Docker images to VM1
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VM1_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "*.tar.gz"
          target: /home/${{ secrets.SSH_USER }}/

      - name: Deploy containers on VM1
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM1_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/${{ secrets.SSH_USER }}

            # Charger les images
            gunzip -c react-frontend.tar.gz | docker load
            gunzip -c backend-api.tar.gz | docker load

            # Supprimer anciens conteneurs si existent
            docker rm -f react-frontend || true
            docker rm -f backend-api || true

            # Lancer les containers
            docker run -d --name react-frontend -p 80:80 react-frontend:${{ github.sha }}
            docker run -d --name backend-api -p 3000:3000 backend-api:${{ github.sha }}

  deploy-vm2:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .

      - name: Copy Docker images to VM2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VM2_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "*.tar.gz"
          target: /home/${{ secrets.SSH_USER }}/

      - name: Deploy containers on VM2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM2_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/${{ secrets.SSH_USER }}

            # Charger les images
            gunzip -c react-frontend.tar.gz | docker load
            gunzip -c backend-api.tar.gz | docker load

            # Supprimer anciens conteneurs si existent
            docker rm -f react-frontend || true
            docker rm -f backend-api || true

            # Lancer les containers
            docker run -d --name react-frontend -p 80:80 react-frontend:${{ github.sha }}
            docker run -d --name backend-api -p 3000:3000 backend-api:${{ github.sha }}
